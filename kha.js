// Generated by Haxe 4.0.0-preview.5+64f4704
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}var Assets = function() { };
Assets.__name__ = true;
Assets.loadEverything = function(callback) {
	Assets.loader = new PIXI.loaders.Loader();
	Assets.loader.add("cards_back","cards/back.png");
	var suits = ["pika","hearts","clover","diam"];
	var _g = 0;
	while(_g < suits.length) {
		var suit = suits[_g];
		++_g;
		Assets.loader.add("cards_" + suit + "_" + 0,"cards/" + suit + "_" + 0 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 1,"cards/" + suit + "_" + 1 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 2,"cards/" + suit + "_" + 2 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 3,"cards/" + suit + "_" + 3 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 4,"cards/" + suit + "_" + 4 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 5,"cards/" + suit + "_" + 5 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 6,"cards/" + suit + "_" + 6 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 7,"cards/" + suit + "_" + 7 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 8,"cards/" + suit + "_" + 8 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 9,"cards/" + suit + "_" + 9 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 10,"cards/" + suit + "_" + 10 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 11,"cards/" + suit + "_" + 11 + ".png");
		Assets.loader.add("cards_" + suit + "_" + 12,"cards/" + suit + "_" + 12 + ".png");
	}
	var colors = ["blue","green","red","yellow"];
	var states = ["disabled","glow","over","press_disabled","press","release"];
	var _g1 = 0;
	while(_g1 < colors.length) {
		var color = colors[_g1];
		++_g1;
		var _g11 = 0;
		while(_g11 < states.length) {
			var state = states[_g11];
			++_g11;
			Assets.loader.add("buttons_" + color + "_" + state,"buttons/btn_ingame_" + color + "_" + state + ".png");
		}
	}
	Assets.loader.load(function(loader,res) {
		Assets.resources = res;
		callback();
	});
};
var Card = function(suit,type,isOpen) {
	if(isOpen == null) {
		isOpen = false;
	}
	this.suit = suit;
	this.type = type;
	this.isOpen = isOpen;
};
Card.__name__ = true;
Card.prototype = {
	__class__: Card
};
var Dealer = function(game) {
	this.onOpenCardListeners = [];
	this.cardDrawListeners = [];
	this.hand = [];
	this.game = game;
};
Dealer.__name__ = true;
Dealer.prototype = {
	addCard: function(card) {
		this.hand.push(card);
		var _g = 0;
		var _g1 = this.cardDrawListeners;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i();
		}
	}
	,update: function() {
		if(this.game.state != GameState.DealerTurn) {
			return;
		}
		var _g = 0;
		var _g1 = this.hand;
		while(_g < _g1.length) {
			var card = _g1[_g];
			++_g;
			card.isOpen = true;
		}
		var _g2 = 0;
		var _g3 = this.onOpenCardListeners;
		while(_g2 < _g3.length) {
			var i = _g3[_g2];
			++_g2;
			i();
		}
		if(this.game.isEmptyDeck()) {
			this.game.endTurn();
			return;
		}
		if(this.game.handCount(this.hand) < 17) {
			this.drawCard();
		} else {
			this.game.endTurn();
		}
	}
	,drawCard: function() {
		var card = this.game.drawCard();
		card.isOpen = true;
		this.hand.push(card);
		var _g = 0;
		var _g1 = this.cardDrawListeners;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i();
		}
	}
	,notifyOnCardDraw: function(listener) {
		this.cardDrawListeners.push(listener);
	}
	,notifyOnOpenCard: function(listener) {
		this.onOpenCardListeners.push(listener);
	}
	,__class__: Dealer
};
var Deck = function(game) {
	this.onRefillListeners = [];
	this.game = game;
};
Deck.__name__ = true;
Deck.prototype = {
	init: function() {
		var _g = [];
		_g.push(new Card(0,0));
		_g.push(new Card(1,0));
		_g.push(new Card(2,0));
		_g.push(new Card(3,0));
		_g.push(new Card(0,1));
		_g.push(new Card(1,1));
		_g.push(new Card(2,1));
		_g.push(new Card(3,1));
		_g.push(new Card(0,2));
		_g.push(new Card(1,2));
		_g.push(new Card(2,2));
		_g.push(new Card(3,2));
		_g.push(new Card(0,3));
		_g.push(new Card(1,3));
		_g.push(new Card(2,3));
		_g.push(new Card(3,3));
		_g.push(new Card(0,4));
		_g.push(new Card(1,4));
		_g.push(new Card(2,4));
		_g.push(new Card(3,4));
		_g.push(new Card(0,5));
		_g.push(new Card(1,5));
		_g.push(new Card(2,5));
		_g.push(new Card(3,5));
		_g.push(new Card(0,6));
		_g.push(new Card(1,6));
		_g.push(new Card(2,6));
		_g.push(new Card(3,6));
		_g.push(new Card(0,7));
		_g.push(new Card(1,7));
		_g.push(new Card(2,7));
		_g.push(new Card(3,7));
		_g.push(new Card(0,8));
		_g.push(new Card(1,8));
		_g.push(new Card(2,8));
		_g.push(new Card(3,8));
		_g.push(new Card(0,9));
		_g.push(new Card(1,9));
		_g.push(new Card(2,9));
		_g.push(new Card(3,9));
		_g.push(new Card(0,10));
		_g.push(new Card(1,10));
		_g.push(new Card(2,10));
		_g.push(new Card(3,10));
		_g.push(new Card(0,11));
		_g.push(new Card(1,11));
		_g.push(new Card(2,11));
		_g.push(new Card(3,11));
		_g.push(new Card(0,12));
		_g.push(new Card(1,12));
		_g.push(new Card(2,12));
		_g.push(new Card(3,12));
		this.cards = _g;
		this.shuffle(this.cards);
	}
	,shuffleDiscard: function() {
		var _this = this.game;
		var cards = _this.discard.cards;
		_this.discard.cards = [];
		var discard = cards;
		this.shuffle(discard);
		var _g = 0;
		while(_g < discard.length) {
			var card = discard[_g];
			++_g;
			card.isOpen = false;
			this.cards.unshift(card);
		}
		var _g1 = 0;
		var _g2 = this.onRefillListeners;
		while(_g1 < _g2.length) {
			var i = _g2[_g1];
			++_g1;
			i();
		}
	}
	,pop: function() {
		return this.cards.pop();
	}
	,shuffle: function(arr) {
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var j = Std.random(arr.length);
			var a = arr[i];
			var b = arr[j];
			arr[i] = b;
			arr[j] = a;
		}
	}
	,notifyOnRefill: function(listener) {
		this.onRefillListeners.push(listener);
	}
	,__class__: Deck
};
var Discard = function() {
	this.cards = [];
};
Discard.__name__ = true;
Discard.prototype = {
	__class__: Discard
};
var GameState = $hxEnums["GameState"] = { __ename__ : true, __constructs__ : ["Bet","PlayerTurn","DealerTurn","RoundOver","GameOver"]
	,Bet: {_hx_index:0,__enum__:"GameState",toString:$estr}
	,PlayerTurn: {_hx_index:1,__enum__:"GameState",toString:$estr}
	,DealerTurn: {_hx_index:2,__enum__:"GameState",toString:$estr}
	,RoundOver: {_hx_index:3,__enum__:"GameState",toString:$estr}
	,GameOver: {_hx_index:4,__enum__:"GameState",toString:$estr}
};
var Game = function() {
	this.gameOverListeners = [];
	this.roundEndListeners = [];
	this.newRoundListeners = [];
	this.betListeners = [];
};
Game.__name__ = true;
Game.prototype = {
	init: function() {
		this.deck = new Deck(this);
		this.deck.init();
		this.discard = new Discard();
		this.player = new Player(this);
		this.dealer = new Dealer(this);
		this.state = GameState.Bet;
	}
	,newRound: function() {
		while(this.player.hand.length > 0) {
			var _this = this.discard;
			var card = this.player.hand.pop();
			_this.cards.push(card);
		}
		while(this.dealer.hand.length > 0) {
			var _this1 = this.discard;
			var card1 = this.dealer.hand.pop();
			_this1.cards.push(card1);
		}
		if(this.deck.cards.length < 10) {
			this.deck.shuffleDiscard();
			return;
		}
		this.player.newRound();
		var _g = 0;
		var _g1 = this.newRoundListeners;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i();
		}
		this.player.addCard(this.deck.pop());
		this.player.addCard(this.deck.pop());
		this.dealer.addCard(this.deck.pop());
		this.dealer.addCard(this.deck.pop());
		this.state = GameState.PlayerTurn;
	}
	,isEmptyDeck: function() {
		return this.deck.cards.length == 0;
	}
	,isGameOver: function() {
		if(this.player.money < 20) {
			this.state = GameState.GameOver;
			var _g = 0;
			var _g1 = this.gameOverListeners;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				i();
			}
			return true;
		}
		return false;
	}
	,checkPlayerHand: function(hand) {
		var count = this.handCount(hand);
		if(count > 21) {
			this.playerLose();
		}
	}
	,handCount: function(hand) {
		var count = 0;
		var _g = 0;
		while(_g < hand.length) {
			var card = hand[_g];
			++_g;
			if(card.type == 0) {
				++count;
			} else {
				count += Card.counts[card.type];
			}
		}
		if(count >= 21) {
			return count;
		}
		var _g1 = 0;
		while(_g1 < hand.length) {
			var card1 = hand[_g1];
			++_g1;
			if(card1.type != 0) {
				continue;
			}
			count += 10;
			if(count > 21) {
				return count - 10;
			}
		}
		return count;
	}
	,drawCard: function() {
		return this.deck.pop();
	}
	,playerWin: function() {
		this.player.win();
		var _g = 0;
		var _g1 = this.roundEndListeners;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i("win");
		}
		this.state = GameState.RoundOver;
	}
	,playerLose: function() {
		this.player.lose();
		if(this.isGameOver()) {
			return;
		}
		var _g = 0;
		var _g1 = this.roundEndListeners;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i("lose");
		}
		this.state = GameState.RoundOver;
	}
	,gameDraw: function() {
		this.player.draw();
		var _g = 0;
		var _g1 = this.roundEndListeners;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i("draw");
		}
		this.state = GameState.RoundOver;
	}
	,endTurn: function() {
		switch(this.state._hx_index) {
		case 0:
			this.state = GameState.PlayerTurn;
			break;
		case 1:
			this.state = GameState.DealerTurn;
			this.dealer.update();
			break;
		case 2:
			this.state = GameState.RoundOver;
			this.scoring();
			break;
		case 3:
			if(this.isGameOver()) {
				return;
			}
			this.state = GameState.Bet;
			var _g = 0;
			var _g1 = this.betListeners;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				i();
			}
			break;
		case 4:
			break;
		}
	}
	,scoring: function() {
		var playerScore = this.handCount(this.player.hand);
		var dealerScore = this.handCount(this.dealer.hand);
		if(playerScore > dealerScore || dealerScore > 21) {
			this.playerWin();
		} else if(dealerScore > playerScore) {
			this.playerLose();
		} else {
			this.gameDraw();
		}
	}
	,notifyOnBet: function(listener) {
		this.betListeners.push(listener);
	}
	,notifyOnNewRound: function(listener) {
		this.newRoundListeners.push(listener);
	}
	,notifyOnRoundEnd: function(listener) {
		this.roundEndListeners.push(listener);
	}
	,notifyOnGameOver: function(listener) {
		this.gameOverListeners.push(listener);
	}
	,__class__: Game
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,__class__: pixi_plugins_app_Application
};
var Main = function() {
	var _gthis = this;
	pixi_plugins_app_Application.call(this);
	this.position = "fixed";
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.backgroundColor = 28720;
	this.transparent = false;
	this.antialias = false;
	this.autoResize = true;
	this.roundPixels = true;
	pixi_plugins_app_Application.prototype.start.call(this);
	var game = new Game();
	game.init();
	var gameView = new view_GameView(this.app,game);
	this.stage.addChild(gameView);
	gameView.init();
	this.onUpdate = $bind(gameView,gameView.onUpdate);
	this.onResize = function() {
		_gthis.width = window.innerWidth;
		_gthis.height = window.innerHeight;
		gameView.onResize();
	};
};
Main.__name__ = true;
Main.main = function() {
	Assets.loadEverything(function() {
		new Main();
	});
};
Main.__super__ = pixi_plugins_app_Application;
Main.prototype = $extend(pixi_plugins_app_Application.prototype,{
	__class__: Main
});
Math.__name__ = true;
var Player = function(game) {
	this.cardDrawListeners = [];
	this.hand = [];
	this.bet = 20;
	this.money = 1000;
	this.game = game;
};
Player.__name__ = true;
Player.prototype = {
	setBet: function(num) {
		this.bet = num;
	}
	,newRound: function() {
		this.money -= this.bet;
		this.canDouble = this.money >= this.bet;
	}
	,addCard: function(card) {
		card.isOpen = true;
		this.hand.push(card);
		var _g = 0;
		var _g1 = this.cardDrawListeners;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i();
		}
	}
	,doubleBet: function() {
		if(!this.canDouble) {
			return;
		}
		this.money -= this.bet;
		this.bet *= 2;
		this.drawCard();
	}
	,drawCard: function() {
		if(this.game.isEmptyDeck()) {
			return;
		}
		this.canDouble = false;
		var card = this.game.drawCard();
		card.isOpen = true;
		this.hand.push(card);
		var _g = 0;
		var _g1 = this.cardDrawListeners;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i();
		}
		this.game.checkPlayerHand(this.hand);
	}
	,win: function() {
		this.money += this.bet * 2;
	}
	,draw: function() {
		this.money += this.bet;
	}
	,lose: function() {
	}
	,notifyOnCardDraw: function(listener) {
		this.cardDrawListeners.push(listener);
	}
	,__class__: Player
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,__class__: haxe_ds_ObjectMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if(((o) instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return $hxEnums[o.__enum__] == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var motion_actuators_IGenericActuator = function() { };
motion_actuators_IGenericActuator.__name__ = true;
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
motion_actuators_GenericActuator.__name__ = true;
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			var method = this._onPause;
			var params = this._onPauseParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			var method = this._onResume;
			var params = this._onResumeParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = window.performance.now() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		window.requestAnimationFrame(motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
motion_actuators_SimpleActuator.__name__ = true;
motion_actuators_SimpleActuator.stage_onEnterFrame = function(deltaTime) {
	var currentTime = deltaTime / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g = 0;
	var _g1 = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g < _g1) {
		var i = _g++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
	window.requestAnimationFrame(motion_actuators_SimpleActuator.stage_onEnterFrame);
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	apply: function() {
		motion_actuators_GenericActuator.prototype.apply.call(this);
		if(this.toggleVisible && Object.prototype.hasOwnProperty.call(this.properties,"alpha")) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			if(value != null) {
				var target1 = this.target;
				var value1 = Reflect.field(this.properties,"alpha") > 0;
				if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
					target1["visible"] = value1;
				} else {
					Reflect.setProperty(target1,"visible",value1);
				}
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value1 = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible")) {
					target["visible"] = value1;
				} else {
					Reflect.setProperty(target,"visible",value1);
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			value = Reflect.getProperty(target,propertyName);
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					value = Reflect.getProperty(target,i);
				}
				var value1 = value;
				if(start == null) {
					start = 0;
				}
				if(value1 == null) {
					value1 = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value1 - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && Object.prototype.hasOwnProperty.call(this.properties,"visible");
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target1 = this.target;
			var value1 = null;
			if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
				value1 = Reflect.field(target1,"visible");
			} else {
				value1 = Reflect.getProperty(target1,"visible");
			}
			this.cacheVisible = value1;
			var target2 = this.target;
			var value2 = true;
			if(Object.prototype.hasOwnProperty.call(target2,"visible")) {
				target2["visible"] = value2;
			} else {
				Reflect.setProperty(target2,"visible",value2);
			}
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = window.performance.now() / 1000;
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (window.performance.now() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setField: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			details.target[details.propertyName] = value;
		} else {
			Reflect.setProperty(details.target,details.propertyName,value);
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.detailsLength;
				while(_g < _g1) {
					var i1 = _g++;
					details = this.propertyDetails[i1];
					var value = details.start + details.change * easing;
					if(details.isField) {
						details.target[details.propertyName] = value;
					} else {
						Reflect.setProperty(details.target,details.propertyName,value);
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.detailsLength;
				while(_g2 < _g11) {
					var i2 = _g2++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						var value1 = endValue;
						if(details.isField) {
							details.target[details.propertyName] = value1;
						} else {
							Reflect.setProperty(details.target,details.propertyName,value1);
						}
					} else {
						var value2 = Math.round(endValue);
						if(details.isField) {
							details.target[details.propertyName] = value2;
						} else {
							Reflect.setProperty(details.target,details.propertyName,value2);
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value3 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value3 = Reflect.field(target,"alpha");
						} else {
							value3 = Reflect.getProperty(target,"alpha");
						}
						tmp = value3 == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						var value4 = false;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = value4;
						} else {
							Reflect.setProperty(target1,"visible",value4);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_IEasing = function() { };
motion_easing_IEasing.__name__ = true;
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing__$Expo_ExpoEaseOut = function() {
};
motion_easing__$Expo_ExpoEaseOut.__name__ = true;
motion_easing__$Expo_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing__$Expo_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.exp(-6.931471805599453 * k);
		}
	}
	,__class__: motion_easing__$Expo_ExpoEaseOut
};
var motion_easing_Expo = function() { };
motion_easing_Expo.__name__ = true;
var motion_Actuate = function() { };
motion_Actuate.__name__ = true;
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if(((properties) instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp1[property] = null;
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
var motion_IComponentPath = function() { };
motion_IComponentPath.__name__ = true;
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {set_start:"set_start",get_start:"get_start",get_end:"get_end"}
};
var motion__$MotionPath_ComponentPath = function() {
	this.paths = [];
	this.strength = 0;
};
motion__$MotionPath_ComponentPath.__name__ = true;
motion__$MotionPath_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion__$MotionPath_ComponentPath.prototype = {
	calculate: function(k) {
		if(this.paths.length == 1) {
			return this.paths[0].calculate(k);
		} else {
			var ratio = k * this.strength;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
				} else {
					return path.calculate(ratio / path.strength);
				}
			}
		}
		return 0;
	}
	,get_start: function() {
		if(this.paths.length > 0) {
			return this.paths[0].get_start();
		} else {
			return 0;
		}
	}
	,set_start: function(value) {
		if(this.paths.length > 0) {
			return this.paths[0].set_start(value);
		} else {
			return 0;
		}
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.get_end();
		} else {
			return this.get_start();
		}
	}
	,__class__: motion__$MotionPath_ComponentPath
	,__properties__: {get_end:"get_end",set_start:"set_start",get_start:"get_start"}
};
var motion__$MotionPath_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.set_start(this.calculate(0.0));
};
motion__$MotionPath_RotationPath.__name__ = true;
motion__$MotionPath_RotationPath.__interfaces__ = [motion_IComponentPath];
motion__$MotionPath_RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_start: function() {
		return this._start;
	}
	,set_start: function(value) {
		return this._start;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion__$MotionPath_RotationPath
	,__properties__: {set_start:"set_start",get_start:"get_start",get_end:"get_end"}
};
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g = 0;
	var _g1 = this.properties.start.length;
	while(_g < _g1) {
		var i = _g++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
motion_actuators_MethodActuator.__name__ = true;
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g = 0;
		var _g1 = this.properties.start.length;
		while(_g < _g1) {
			var i = _g++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g = 0;
		var _g1 = this.properties.start.length;
		while(_g < _g1) {
			var i = _g++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g = 0;
			var _g1 = this.properties.start.length;
			while(_g < _g1) {
				var i = _g++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
motion_actuators_MotionPathActuator.__name__ = true;
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
			} else {
				Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.set_start(Reflect.field(this.target,propertyName));
				} else {
					isField = false;
					path.set_start(Reflect.getProperty(this.target,propertyName));
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) {
						details1.target[details1.propertyName] = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) {
							details2.target[details2.propertyName] = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						}
					} else if(details2.isField) {
						details2.target[details2.propertyName] = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value = Reflect.field(target,"alpha");
						} else {
							value = Reflect.getProperty(target,"alpha");
						}
						tmp = value == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target1 = this.target;
						var value1 = false;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1["visible"] = value1;
						} else {
							Reflect.setProperty(target1,"visible",value1);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
motion_actuators_PropertyDetails.__name__ = true;
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
motion_actuators_PropertyPathDetails.__name__ = true;
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var motion_easing_Linear = function() { };
motion_easing_Linear.__name__ = true;
motion_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"};
motion_easing_Linear.get_easeNone = function() {
	return new motion_easing_LinearEaseNone();
};
var motion_easing_LinearEaseNone = function() {
};
motion_easing_LinearEaseNone.__name__ = true;
motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
motion_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,__class__: motion_easing_LinearEaseNone
};
var view_Button = function(color,text) {
	this.state = "release";
	this.disabled = false;
	var _gthis = this;
	PIXI.Container.call(this);
	this.color = color;
	this.bg = new PIXI.Sprite(Assets.resources["buttons_" + this.color + "_" + this.state].texture);
	this.addChild(this.bg);
	this.text = text;
	text.x = this.width / 2 - text.width / 2;
	text.y = this.height / 2 - text.height / 2;
	this.addChild(text);
	this.buttonMode = true;
	this.interactive = true;
	this.pointerdown = function(e) {
		_gthis.state = "press";
		if(_gthis.disabled) {
			_gthis.state = "press_disabled";
		}
		_gthis.text.alpha = _gthis.disabled ? 0.5 : 1;
		_gthis.bg.texture = Assets.resources["buttons_" + _gthis.color + "_" + _gthis.state].texture;
	};
	this.pointerup = function(e1) {
		_gthis.state = "over";
		if(_gthis.disabled) {
			_gthis.state = "disabled";
		}
		_gthis.text.alpha = _gthis.disabled ? 0.5 : 1;
		_gthis.bg.texture = Assets.resources["buttons_" + _gthis.color + "_" + _gthis.state].texture;
	};
	this.pointerover = function(e2) {
		_gthis.state = "over";
		if(_gthis.disabled) {
			_gthis.state = "disabled";
		}
		_gthis.text.alpha = _gthis.disabled ? 0.5 : 1;
		_gthis.bg.texture = Assets.resources["buttons_" + _gthis.color + "_" + _gthis.state].texture;
	};
	this.pointerout = function(e3) {
		_gthis.state = "release";
		if(_gthis.disabled) {
			_gthis.state = "disabled";
		}
		_gthis.text.alpha = _gthis.disabled ? 0.5 : 1;
		_gthis.bg.texture = Assets.resources["buttons_" + _gthis.color + "_" + _gthis.state].texture;
	};
};
view_Button.__name__ = true;
view_Button.__super__ = PIXI.Container;
view_Button.prototype = $extend(PIXI.Container.prototype,{
	set_disabled: function(b) {
		if(this.disabled == b) {
			return b;
		}
		this.disabled = b;
		if(b) {
			this.state = "disabled";
			this.text.alpha = this.disabled ? 0.5 : 1;
			this.bg.texture = Assets.resources["buttons_" + this.color + "_" + this.state].texture;
		} else {
			this.state = "release";
			this.text.alpha = this.disabled ? 0.5 : 1;
			this.bg.texture = Assets.resources["buttons_" + this.color + "_" + this.state].texture;
		}
		return b;
	}
	,__class__: view_Button
	,__properties__: {set_disabled:"set_disabled"}
});
var view_CardView = function(card) {
	PIXI.Container.call(this);
	this.card = card;
	var path = this.getTexturePath(card);
	var img = Assets.resources[path];
	var tex = card.isOpen ? img.texture : Assets.resources["cards_back"].texture;
	this.sprite = new PIXI.Sprite(tex);
	this.addChild(this.sprite);
};
view_CardView.__name__ = true;
view_CardView.__super__ = PIXI.Container;
view_CardView.prototype = $extend(PIXI.Container.prototype,{
	getTexturePath: function(card) {
		var suit;
		switch(card.suit) {
		case 0:
			suit = "pika";
			break;
		case 1:
			suit = "hearts";
			break;
		case 2:
			suit = "clover";
			break;
		case 3:
			suit = "diam";
			break;
		}
		var type = card.type == 0 ? 12 : card.type - 1;
		return "cards_" + suit + "_" + type;
	}
	,showCard: function() {
		var path = this.getTexturePath(this.card);
		var img = Assets.resources[path];
		this.sprite.texture = img.texture;
	}
	,show: function() {
		var _gthis = this;
		if(this.sprite.texture != Assets.resources["cards_back"].texture) {
			return;
		}
		var tintSpeed = 328965;
		var time = 0.3;
		motion_Actuate.tween(this.sprite,time,{ x : this.sprite.width / 2}).ease(motion_easing_Linear.get_easeNone()).onUpdate(function() {
			if(_gthis.sprite.tint - tintSpeed > 0) {
				_gthis.sprite.tint -= tintSpeed;
			}
		});
		motion_Actuate.tween(this.sprite.scale,time,{ x : 0}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.showCard();
			motion_Actuate.tween(_gthis.sprite,time,{ x : 0}).ease(motion_easing_Linear.get_easeNone()).onUpdate(function() {
				if(_gthis.sprite.tint + tintSpeed < 16777215) {
					_gthis.sprite.tint += tintSpeed;
				}
			}).onComplete(function() {
				_gthis.sprite.tint = 16777215;
			});
			motion_Actuate.tween(_gthis.sprite.scale,time,{ x : 1}).ease(motion_easing_Linear.get_easeNone());
		});
	}
	,__class__: view_CardView
});
var view_DealerView = function(gameView,dealer) {
	this.hand = [];
	PIXI.Container.call(this);
	this.gameView = gameView;
	this.dealer = dealer;
	var _g = 0;
	var _g1 = dealer.hand;
	while(_g < _g1.length) {
		var card = _g1[_g];
		++_g;
		this.addCard(card);
	}
	dealer.notifyOnOpenCard($bind(this,this.onOpenCard));
	dealer.notifyOnCardDraw($bind(this,this.onCardDraw));
};
view_DealerView.__name__ = true;
view_DealerView.__super__ = PIXI.Container;
view_DealerView.prototype = $extend(PIXI.Container.prototype,{
	addCard: function(card) {
		var cardView = new view_CardView(card);
		cardView.x = (cardView.width + 5) * this.hand.length;
		this.hand.push(cardView);
		this.addChild(cardView);
	}
	,newRound: function() {
		var _gthis = this;
		while(this.hand.length > 0) {
			var oldCard = this.hand.pop();
			this.removeChild(oldCard);
			var card = [this.parent.addChild(oldCard)];
			var scale = this.gameView.gameScale;
			card[0].x = this.x + oldCard.x * scale;
			card[0].scale = new PIXI.Point(scale,scale);
			motion_Actuate.tween(card[0],1,{ y : card[0].y + card[0].height, alpha : 0}).onComplete((function(card1) {
				return function() {
					_gthis.parent.removeChild(card1[0]);
				};
			})(card));
		}
		var _g = 0;
		var _g1 = this.dealer.hand;
		while(_g < _g1.length) {
			var card2 = _g1[_g];
			++_g;
			this.addCard(card2);
		}
	}
	,isOpenHand: function() {
		if(this.dealer.hand.length == 0) {
			return false;
		}
		var _g = 0;
		var _g1 = this.dealer.hand;
		while(_g < _g1.length) {
			var card = _g1[_g];
			++_g;
			if(!card.isOpen) {
				return false;
			}
		}
		return true;
	}
	,onOpenCard: function() {
		var _g = 0;
		var _g1 = this.hand;
		while(_g < _g1.length) {
			var card = _g1[_g];
			++_g;
			card.show();
		}
	}
	,cardsWidth: function(num) {
		var w = Assets.resources["cards_back"].texture.width;
		return (w + 5) * num;
	}
	,getHeight: function() {
		if(this.hand.length == 0) {
			return 0;
		}
		return this.hand[0].height * this.scale.y;
	}
	,onCardDraw: function() {
		var _gthis = this;
		var card = this.dealer.hand[this.dealer.hand.length - 1];
		this.addCard(card);
		var cardView = this.hand[this.hand.length - 1];
		var oldX = cardView.x;
		var oldY = cardView.y;
		var scale = this.gameView.gameScale;
		cardView.x = (this.gameView.deckCords(this).x - cardView.height / 2) / scale;
		cardView.y = (this.gameView.deckCords(this).y + cardView.width / 4) / scale;
		cardView.rotation = -Math.PI / 2;
		motion_Actuate.tween(cardView,1,{ x : oldX, y : oldY, rotation : 0}).onComplete(function() {
			_gthis.gameView.updateDealerPoints();
			_gthis.dealer.update();
		});
		var width = this.cardsWidth(this.hand.length) * scale;
		this.gameView.onCardDraw(this,width);
	}
	,__class__: view_DealerView
});
var view_DeckView = function(deck) {
	this.cards = [];
	PIXI.Container.call(this);
	this.deck = deck;
	this.init();
};
view_DeckView.__name__ = true;
view_DeckView.__super__ = PIXI.Container;
view_DeckView.prototype = $extend(PIXI.Container.prototype,{
	init: function() {
		var offX = 0.0;
		var _g = 0;
		var _g1 = this.deck.cards;
		while(_g < _g1.length) {
			var card = _g1[_g];
			++_g;
			var cardView = new view_CardView(card);
			this.cards.push(cardView);
			cardView.x = offX;
			this.addChild(cardView);
			offX -= 0.5;
		}
		if(this.cards.length == 0) {
			return;
		}
		var w = this.cards[0].width;
		var h = this.cards[0].height;
		this.pivot.set(w / 2,h / 2);
		this.rotation = Math.PI / 2;
	}
	,onCardDraw: function() {
		this.removeChild(this.cards.pop());
	}
	,onDeckRefill: function() {
		var oldLen = this.cards.length;
		this.init();
		var _g = 0;
		var _g1 = this.cards.length - oldLen;
		while(_g < _g1) {
			var i = _g++;
			var card = this.cards[i];
			var oldX = card.x;
			card.x = -9000;
			motion_Actuate.tween(card,1,{ x : oldX}).delay(i / 10);
		}
	}
	,__class__: view_DeckView
});
var view_GameView = function(app,game) {
	this.betButtons = [];
	this.textStyle = new PIXI.TextStyle({ fontFamily : "Arial", fontSize : 36, fontStyle : "italic", fontWeight : "normal", fill : ["#fffff0","#ffff44"], stroke : "#303020", strokeThickness : 4, dropShadow : true, dropShadowColor : "#000000", dropShadowAlpha : 0.75, dropShadowAngle : Math.PI / 6, dropShadowDistance : 6, lineJoin : "round"});
	this.gameScale = 0.75;
	PIXI.Container.call(this);
	this.app = app;
	this.game = game;
};
view_GameView.__name__ = true;
view_GameView.__super__ = PIXI.Container;
view_GameView.prototype = $extend(PIXI.Container.prototype,{
	init: function() {
		this.initBG();
		var scale = new PIXI.Point(this.gameScale,this.gameScale);
		this.deckView = new view_DeckView(this.game.deck);
		this.deckView.scale = scale;
		this.deckView.x = this.app.renderer.width - this.deckView.width;
		this.deckView.y = this.app.renderer.height / 2;
		this.addChild(this.deckView);
		this.game.player.notifyOnCardDraw(($_=this.deckView,$bind($_,$_.onCardDraw)));
		this.game.dealer.notifyOnCardDraw(($_=this.deckView,$bind($_,$_.onCardDraw)));
		this.dealerView = new view_DealerView(this,this.game.dealer);
		this.dealerView.scale = scale;
		this.dealerView.x = (this.app.renderer.width - this.dealerView.width) / 2;
		this.dealerView.y = 0;
		this.addChild(this.dealerView);
		this.playerView = new view_PlayerView(this,this.game.player);
		this.playerView.scale = scale;
		this.playerHeight = Assets.resources["cards_back"].texture.height * this.gameScale;
		this.minPlayerWidth = this.playerView.cardsWidth(2) * this.gameScale;
		this.playerView.x = (this.app.renderer.width - this.minPlayerWidth) / 2;
		this.playerView.y = this.app.renderer.height - this.playerHeight;
		this.addChild(this.playerView);
		this.addPoints();
		if(this.game.state == GameState.Bet) {
			this.addBetButtons();
		} else {
			this.addButtons();
		}
		this.game.notifyOnBet($bind(this,this.onBet));
		this.game.notifyOnNewRound($bind(this,this.onNewRound));
		this.game.notifyOnRoundEnd($bind(this,this.onRoundEnd));
		this.game.notifyOnGameOver($bind(this,this.onGameOver));
		this.game.deck.notifyOnRefill($bind(this,this.onRefill));
	}
	,initBG: function() {
		var canvas = window.document.createElement("canvas");
		canvas.width = this.app.renderer.width | 0;
		canvas.height = this.app.renderer.height | 0;
		var ctx = canvas.getContext("2d");
		var w = canvas.width * 2;
		var h = canvas.height * 2;
		var grd = ctx.createRadialGradient(w / 4,h / 2,0,w / 4,h / 2,w / 3);
		grd.addColorStop(0,"#00d150");
		grd.addColorStop(1,"#007030");
		ctx.fillStyle = grd;
		ctx.translate(0,0);
		ctx.scale(1,0.5);
		ctx.fillRect(0,0,w,h);
		this.removeChild(this.bg);
		this.bg = new PIXI.Sprite(PIXI.Texture.fromCanvas(canvas));
		this.addChildAt(this.bg,0);
	}
	,addPoints: function() {
		var bet = this.playerView.bet;
		bet.scale = new PIXI.Point(this.gameScale,this.gameScale);
		bet.x = this.app.renderer.width / 2 - this.minPlayerWidth / 2 - bet.width / 2;
		bet.y = this.playerView.y - bet.height;
		this.addChild(this.playerView.bet);
		var money = this.playerView.money;
		money.scale = new PIXI.Point(this.gameScale,this.gameScale);
		money.x = this.app.renderer.width / 2 + this.minPlayerWidth / 2 - money.width / 2;
		money.y = this.playerView.y - money.height;
		this.addChild(this.playerView.money);
		var offY = Math.max(bet.height,money.height);
		var points = this.game.handCount(this.game.player.hand);
		this.playerPoints = new PIXI.Text("",this.textStyle);
		this.addChild(this.playerPoints);
		this.dealerPoints = new PIXI.Text("",this.textStyle);
		this.addChild(this.dealerPoints);
	}
	,addBetButtons: function() {
		var _gthis = this;
		var bets = [20,50,100];
		var colors = ["green","yellow","red"];
		var offY = -Assets.resources["buttons_blue_over"].texture.height;
		var _g = 0;
		var _g1 = bets.length;
		while(_g < _g1) {
			var i = _g++;
			var bet = [bets[i]];
			var text = new PIXI.Text("Bet: " + bet[0] + "$",this.textStyle);
			var btn = new view_Button(colors[i],text);
			btn.y = (this.app.renderer.height - btn.height) / 2 + offY;
			offY += btn.height;
			this.betButtons.push(btn);
			this.addChild(btn);
			if(this.game.player.money < bet[0]) {
				btn.set_disabled(true);
				continue;
			}
			btn.pointertap = (function(bet1) {
				return function(e) {
					if(_gthis.game.state != GameState.Bet) {
						return;
					}
					_gthis.hideBetButtons();
					_gthis.addButtons();
					_gthis.game.player.setBet(bet1[0]);
					_gthis.game.newRound();
				};
			})(bet);
		}
		if(this.game.player.money < bets[0]) {
			this.onRoundEnd("gameOver");
		}
	}
	,hideBetButtons: function() {
		while(this.betButtons.length > 0) this.removeChild(this.betButtons.pop());
	}
	,addButtons: function() {
		var _gthis = this;
		var text = new PIXI.Text("Hit",this.textStyle);
		this.draw = new view_Button("yellow",text);
		this.draw.pointertap = function(e) {
			if(_gthis.game.state != GameState.PlayerTurn) {
				return;
			}
			_gthis.game.player.drawCard();
		};
		this.draw.y = (this.app.renderer.height - this.draw.height) / 2 - Assets.resources["buttons_blue_over"].texture.height;
		this.addChild(this.draw);
		var text1 = new PIXI.Text("Stand",this.textStyle);
		this.end = new view_Button("blue",text1);
		this.end.pointertap = function(e1) {
			if(_gthis.game.state != GameState.PlayerTurn) {
				return;
			}
			_gthis.game.endTurn();
		};
		this.end.y = this.draw.y + this.draw.height;
		this.addChild(this.end);
		var text2 = new PIXI.Text("Double",this.textStyle);
		this.double = new view_Button("red",text2);
		this.double.pointertap = function(e2) {
			if(_gthis.game.state != GameState.PlayerTurn) {
				return;
			}
			_gthis.game.player.doubleBet();
		};
		this.double.y = this.end.y + this.end.height;
		this.addChild(this.double);
	}
	,hideButtons: function() {
		this.removeChild(this.draw);
		this.removeChild(this.end);
		this.removeChild(this.double);
	}
	,onBet: function() {
		this.hideButtons();
		this.addBetButtons();
	}
	,onNewRound: function() {
		this.playerView.newRound();
		this.dealerView.newRound();
		this.dealerPoints.text = "";
	}
	,onCardDraw: function(view1,width) {
		motion_Actuate.tween(view1,1,{ x : (this.app.renderer.width - width) / 2});
	}
	,deckCords: function(view1) {
		return new PIXI.Point(this.deckView.x - view1.x,this.deckView.y - view1.y);
	}
	,onRoundEnd: function(state) {
		var _gthis = this;
		var text;
		switch(state) {
		case "draw":
			text = "Draw!";
			break;
		case "gameOver":
			text = "Game Over";
			break;
		case "lose":
			text = "You lose!";
			break;
		case "refill":
			text = "Deck shuffled!";
			break;
		case "win":
			text = "You win!";
			break;
		default:
			text = "Error";
		}
		var style = this.textStyle.clone();
		style.fontSize = 50;
		style.align = "center";
		this.roundText = new PIXI.Text(text,style);
		if(state != "gameOver") {
			this.roundText.interactive = true;
			this.roundText.buttonMode = true;
		}
		this.roundText.pointertap = function(e) {
			_gthis.newRoundBtn(state);
		};
		this.roundText.x = (this.app.renderer.width - this.roundText.width) / 2;
		this.roundText.y = (this.app.renderer.height - this.roundText.height) / 2;
		this.addChild(this.roundText);
		this.updateDealerPoints();
		if(state == "gameOver") {
			return;
		}
		var text1 = new PIXI.Text("Replay",style);
		this.replay = new view_Button("green",text1);
		this.replay.pointertap = function(e1) {
			_gthis.newRoundBtn(state);
		};
		this.replay.x = Assets.resources["buttons_blue_over"].texture.width;
		this.replay.y = (this.app.renderer.height - this.replay.height) / 2;
		this.addChild(this.replay);
	}
	,newRoundBtn: function(state) {
		if(state == "gameOver") {
			return;
		}
		this.removeChild(this.replay);
		this.removeChild(this.roundText);
		if(state == "refill") {
			this.game.newRound();
			return;
		}
		this.game.endTurn();
	}
	,updateDealerPoints: function() {
		if(!this.dealerView.isOpenHand()) {
			return;
		}
		var points = this.game.handCount(this.game.dealer.hand);
		this.dealerPoints.text = "" + points;
		this.dealerPoints.x = (this.app.renderer.width - this.dealerPoints.width) / 2;
		var tmp = this.dealerView.y;
		var tmp1 = this.dealerView.getHeight();
		this.dealerPoints.y = tmp + tmp1;
	}
	,onRefill: function() {
		this.onRoundEnd("refill");
		this.deckView.onDeckRefill();
	}
	,onGameOver: function() {
		this.onRoundEnd("gameOver");
	}
	,onUpdate: function(e) {
		if(this.draw != null) {
			var off = this.game.state == GameState.PlayerTurn ? false : true;
			this.draw.set_disabled(off);
			this.end.set_disabled(off);
			if(!this.game.player.canDouble) {
				this.double.set_disabled(true);
			} else {
				this.double.set_disabled(off);
			}
		}
		if(this.playerView.points > 0) {
			this.playerPoints.text = "" + this.playerView.points;
			this.playerPoints.x = (this.app.renderer.width - this.playerPoints.width) / 2;
			this.playerPoints.y = this.playerView.y - this.playerPoints.height;
		}
		this.playerView.update();
	}
	,onResize: function() {
		this.initBG();
	}
	,__class__: view_GameView
});
var view_PlayerView = function(gameView,player) {
	this.style = new PIXI.TextStyle({ fontFamily : "Arial", fontSize : 36, fontStyle : "italic", fontWeight : "normal", fill : ["#fffff0","#ffff44"], stroke : "#303020", strokeThickness : 4, dropShadow : true, dropShadowColor : "#000000", dropShadowAlpha : 0.75, dropShadowBlur : 0, dropShadowAngle : Math.PI / 6, dropShadowDistance : 6, lineJoin : "round"});
	this.points = 0;
	this.hand = [];
	PIXI.Container.call(this);
	this.gameView = gameView;
	this.player = player;
	player.notifyOnCardDraw($bind(this,this.onCardDraw));
	this.bet = new PIXI.Text("Bet: " + player.bet + "$",this.style);
	this.money = new PIXI.Text("Bank: " + player.money + "$",this.style);
	this.newRound();
	this.money.x = this.width - this.money.width;
	this.addChild(this.bet);
	this.addChild(this.money);
};
view_PlayerView.__name__ = true;
view_PlayerView.__super__ = PIXI.Container;
view_PlayerView.prototype = $extend(PIXI.Container.prototype,{
	addCard: function(card) {
		var cardView = new view_CardView(card);
		cardView.x = (cardView.width + 5) * this.hand.length;
		this.hand.push(cardView);
		this.addChild(cardView);
		this.points = this.player.game.handCount(this.player.hand);
	}
	,update: function() {
		this.money.text = "Bank: " + this.player.money + "$";
		this.bet.text = "Bet: " + this.player.bet + "$";
	}
	,newRound: function() {
		var _gthis = this;
		while(this.hand.length > 0) {
			var oldCard = this.hand.pop();
			this.removeChild(oldCard);
			var card = [this.parent.addChild(oldCard)];
			var scale = this.gameView.gameScale;
			card[0].y = this.y + oldCard.y * scale;
			card[0].x = this.x + oldCard.x * scale;
			card[0].scale = new PIXI.Point(scale,scale);
			motion_Actuate.tween(card[0],1,{ y : card[0].y - card[0].height, alpha : 0}).onComplete((function(card1) {
				return function() {
					_gthis.parent.removeChild(card1[0]);
				};
			})(card));
		}
		var _g = 0;
		var _g1 = this.player.hand;
		while(_g < _g1.length) {
			var card2 = _g1[_g];
			++_g;
			this.addCard(card2);
		}
	}
	,cardsWidth: function(num) {
		var w = Assets.resources["cards_back"].texture.width;
		return (w + 5) * num;
	}
	,onCardDraw: function() {
		var card = this.player.hand[this.player.hand.length - 1];
		this.addCard(card);
		var cardView = this.hand[this.hand.length - 1];
		var oldX = cardView.x;
		var oldY = cardView.y;
		var scale = this.gameView.gameScale;
		cardView.x = (this.gameView.deckCords(this).x - cardView.height / 2) / scale;
		cardView.y = (this.gameView.deckCords(this).y + cardView.width / 4) / scale;
		cardView.rotation = -Math.PI / 2;
		motion_Actuate.tween(cardView,1,{ x : oldX, y : oldY, rotation : 0});
		var width = this.cardsWidth(this.hand.length) * scale;
		this.gameView.onCardDraw(this,width);
	}
	,__class__: view_PlayerView
});
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
Card.counts = [11,2,3,4,5,6,7,8,9,10,10,10,10];
js_Boot.__toStr = ({ }).toString;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_easing_Expo.easeOut = new motion_easing__$Expo_ExpoEaseOut();
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.easeOut;
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
